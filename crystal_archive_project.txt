#!/bin/bash
# Crystal Archive Project Setup Script

# Create project structure
mkdir -p crystal-archive
cd crystal-archive

# Root files
cat > pyproject.toml << 'EOF'
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "crystal-archive"
version = "1.0.0"
description = "Ultra-durable archival stack for 5D optical crystal media"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Crystal Archive Team", email = "team@crystal-archive.io"}
]
dependencies = [
    "numpy>=1.21.0",
    "matplotlib>=3.5.0",
    "zstandard>=0.18.0",
    "pynacl>=1.5.0",
    "reedsolo>=1.5.4",
    "click>=8.0.0",
    "scipy>=1.9.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "mypy>=0.991",
    "ruff>=0.0.261"
]

[project.scripts]
crystal-archive = "crystal_archive.cli.main:cli"

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
EOF

cat > README.md << 'EOF'
# Crystal Archive

Ultra-durable archival stack for 5D optical "crystal" media with advanced error correction.

## Features

- **Compression**: zstandard and xz with version tracking
- **Error Correction**: 
  - Inner layer: LDPC (Low-Density Parity-Check) with soft-decision decoding
  - Outer layer: Reed-Solomon erasure coding
- **5D Voxel Mapping**: Orientation and retardance encoding with Gray coding
- **Data Integrity**: SHA-256 hashing, Merkle trees, Ed25519 signatures
- **Self-Describing**: OAIS-compliant manifests with embedded decoding instructions
- **Damage Simulation**: Test resilience against bit errors, tile loss, calibration drift

## Quick Start

```bash
# Install
pip install -e .

# Encode a folder
crystal-archive encode examples/sample_data --out build/vox --profile A

# Simulate damage and test recovery
crystal-archive simulate --tile-loss 0.15 --bitflip 0.01 --runs 5

# Decode back
crystal-archive decode build/vox --out build/recovered

# Verify integrity
crystal-archive verify build/vox
```

## Encoding Profiles

### Profile A (Conservative)
- 3 bits/voxel (4 orientations × 2 retardance levels)
- LDPC rate 0.75 with soft-decision decoding
- Reed-Solomon +20% overhead
- Deep interleaving across 16+ planes
- Target: 99.9999% recovery with 15% tile loss

### Profile B (Aggressive)
- 5 bits/voxel (8 orientations × 4 levels)
- LDPC rate 0.83
- Reed-Solomon +12% overhead
- Interleaving across 8+ planes
- Higher density, lower margin

## Architecture

```
Folder → Pack → Compress → Shard → LDPC → Interleave → Map to Voxels → Crystal
                    ↓
                Manifest (self-describing parameters + integrity)
```

## License

MIT License - See LICENSE file for details
EOF

cat > LICENSE << 'EOF'
MIT License

Copyright (c) 2025 Crystal Archive Project

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF

cat > .gitignore << 'EOF'
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual Environment
venv/
ENV/
env/

# Testing
.pytest_cache/
.coverage
htmlcov/
.tox/
.hypothesis/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# Project specific
voxel/
reports/
recovered/
*.npy
manifest.json
EOF

# Create source directories
mkdir -p src/crystal_archive/{codecs,mapping,archive,simulate,cli}
mkdir -p tests
mkdir -p examples/sample_data
mkdir -p docs/primer

# Create example data files
cat > examples/sample_data/README.txt << 'EOF'
Crystal Archive Demo Dataset
============================

This folder contains sample files to demonstrate the archival pipeline.

The crystal archive system will:
1. Pack these files into a single blob
2. Compress using zstandard
3. Apply error correction codes
4. Map to 5D voxel symbols
5. Generate self-describing manifest
EOF

cat > examples/sample_data/poem.txt << 'EOF'
We shall meet in the place where there is no darkness.
— George Orwell

The future is already here – it's just not evenly distributed.
— William Gibson
EOF

cat > examples/sample_data/numbers.csv << 'EOF'
i,value,constant
0,3.14159265358979323846,pi
1,2.71828182845904523536,e
2,1.61803398874989484820,phi
3,1.41421356237309504880,sqrt2
EOF

echo "Project structure created successfully!"
